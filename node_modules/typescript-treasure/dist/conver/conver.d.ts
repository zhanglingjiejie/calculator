import { If_Never, Primitive } from "..";
export type StrToNum<S extends string, R = never> = S extends `${infer N extends number}` ? N : R;
export type StrToUnion<T extends string> = T extends `${infer Letter}${infer Rest}` ? (Letter | StrToUnion<Rest>) : (never);
export type ToStr<T extends Exclude<Primitive, symbol>, R = never> = `${T}` extends string ? `${T}` : R;
export type UnionToIntersect<U> = (U extends any ? (a: U) => any : never) extends (a: infer T) => any ? T : never;
export type UnionToTuple<T> = If_Never<T> extends true ? ([
]) : (UnionToIntersect<T extends any ? () => T : never> extends () => infer R ? ([
    ...UnionToTuple<Exclude<T, R>>,
    R
]) : ([
]));
export type StrToTuple<S extends string> = S extends `${infer F}${infer R}` ? ([
    F,
    ...StrToTuple<R>
]) : ([
]);
