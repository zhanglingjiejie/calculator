export type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;
export type UnEqual<X, Y> = true extends Equal<X, Y> ? false : true;
export type If_Equal<X, Y> = Equal<X, Y>;
export type If_UnEqual<X, Y> = UnEqual<X, Y>;
export type If_Any<T> = 0 extends (1 & T) ? true : false;
export type If_UnAny<T> = true extends If_Any<T> ? false : true;
export type If_True<T extends true> = T;
export type If_False<T extends false> = T;
export type Check<T extends true> = T;
