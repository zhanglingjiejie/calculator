import { Plus } from '../number/calc';
import { Decreaser, If_Lte } from '../number/number';
import { Str } from '../string/string';
import { If_Never, Len } from '../utils/utils';
export type Shift<T extends any[]> = T extends [any, ...infer R] ? R : T;
export type Push<T extends any[], I> = [...T, I];
export type Append<T extends any[], I> = Push<T, I>;
export type Pop<arr extends any[], index extends number = Decreaser<arr['length']>, item extends any = arr[index], result extends any[] = []> = arr extends [infer first, ...infer rest] ? (first extends item ? (Pop<rest, index, item, result>) : (Pop<rest, index, item, [...result, first]>)) : (result);
export type Flat<T extends any[], D extends number = -1, C extends any[] = []> = C['length'] extends D ? (T) : (T extends [infer F, ...infer R] ? (If_Never<F> extends true ? ([
    F,
    ...Flat<R, D, C>
]) : (F extends any[] ? ([
    ...Flat<F, D, [...C, 1]>,
    ...Flat<R, D, C>
]) : ([
    F,
    ...Flat<R, D, C>
]))) : ([
]));
export type FillTuple<N extends number, C extends any = 1, G extends any[] = _Gen2Seq<N, C>, R extends any[] = []> = Len<R> extends N ? (R) : (G extends [infer F extends any[], ...infer Rest] ? (Plus<Len<R, string>, Len<F, string>> extends infer L extends string ? (If_Lte<L, N> extends true ? (FillTuple<N, C, Rest, [...R, ...F]>) : (FillTuple<N, C, Rest, R>)) : (never)) : (R));
type _Gen2Seq<N extends number, C extends any = 1, R extends any[] = [[C]]> = Str<N> extends keyof R[0] ? (R) : (_Gen2Seq<N, C, [[...R[0], ...R[0]], ...R]>);
export {};
