import { Space } from '../alias/alias';
import { If_Never, Len } from '../utils/utils';
export type StrRemove<Str, SubStr extends string> = Str extends `${infer F}${SubStr}${infer R}` ? (`${F}${R}`) : (Str);
export type StrRemoveSome<Str, SubStrs extends string[]> = SubStrs extends [infer F extends string, ...infer R extends string[]] ? (StrRemoveSome<StrRemove<Str, F>, R>) : (Str);
export type If_StrInclude<S, SU extends string> = If_Never<S> extends true ? false : S extends `${string}${SU}${string}` ? true : false;
export type If_StrIncludes<Str, Subs extends string[]> = If_Never<Str> extends true ? (false) : (Subs extends [infer F extends string, ...infer R extends string[]] ? (If_StrInclude<Str, F> extends true ? true : If_StrIncludes<Str, R>) : (false));
export type TrimLeft<S extends string> = S extends `${Space}${infer SU}` ? TrimLeft<SU> : S;
export type TrimRight<S extends string> = S extends `${infer SU}${Space}` ? TrimRight<SU> : S;
export type Trim<S extends string> = TrimLeft<TrimRight<S>>;
export type If_StrLenGt<str1 extends string, str2 extends string> = str1 extends `${string}${infer rest1}` ? (str2 extends `${string}${infer rest2}` ? (If_StrLenGt<rest1, rest2>) : (true)) : (false);
export type If_StrLenLt<str1 extends string, str2 extends string> = If_StrLenGt<str2, str1>;
export type If_StrLenEq<str1 extends string, str2 extends string> = Len<str1> extends Len<str2> ? true : false;
export type If_StrLenGte<str1 extends string, str2 extends string> = Len<str1> extends Len<str2> ? true : If_StrLenGt<str1, str2>;
export type If_StrLenLte<str1 extends string, str2 extends string> = Len<str1> extends Len<str2> ? true : If_StrLenLt<str1, str2>;
export type Str<T extends string | number | bigint | boolean> = T extends string ? T : `${T}`;
export type If_EmptyStr<T extends string> = T extends "" ? true : false;
